/*
    Use 2 pointer Approach:
    1. "left" pointer at 0th index and "right" pointer at (length - 1)th index
    2. initialize a interator "i" to 0 and interate from 0 to "right"
    3. if arr[i] == 0, then 
          (a) swap arr[i] with arr[left] 
          (b) increment left and i by 1
       else if arr[i] == 2, then
          (a) swap arr[i] with arr[right]
          (b) decrement right by 1 
       else,
          (a) increment i by 1

    This Algorithm just pushes 0's to left and 2's to the right and remaining are all 1's which will be taken care automatically
*/


import java.util.* ;
import java.io.*; 
public class Solution 
{
    public static void swap(int[] arr, int left, int right) {
        int temp = arr[left];
        arr[left] = arr[right];
        arr[right] = temp;
    }
    public static void sort012(int[] arr)
    {
        int left = 0, right = arr.length - 1;
        int ind = 0;
        while (ind <= right) {
            if (arr[ind] == 0) {
                swap(arr, left, ind);
                left++;
                ind++;
            }
            else if (arr[ind] == 2) {
                swap(arr, ind, right);
                right--;
            }
            else
                ind++;
        }
    }
}
