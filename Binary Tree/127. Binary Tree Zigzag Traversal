import java.util.*;

public class Solution {
	public static List<Integer> zigZagTraversal(BinaryTreeNode<Integer> root) {
		List<Integer> list = new ArrayList<>();
		if (root == null)
			return list;
		Queue<BinaryTreeNode<Integer>> que = new ArrayDeque<>();
		que.offer(root);
		int level = 0;
		while (!que.isEmpty()) {
			int n = que.size();
			List<Integer> sub = new ArrayList<>();
			while (n-->0) {
				sub.add(que.peek().data);
				if (que.peek().left != null)	que.offer(que.peek().left);
				if (que.peek().right != null)	que.offer(que.peek().right);
				que.poll();
			}
			if (level % 2 != 0)
				Collections.reverse(sub);
			list.addAll(sub);
			level++;
		}
		return list;
	}
}
