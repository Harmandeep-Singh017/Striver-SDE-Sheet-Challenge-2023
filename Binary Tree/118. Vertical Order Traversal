import java.util.* ;
import java.io.*; 
/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T> 
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data) 
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

import java.util.ArrayList;

public class Solution 
{
    static class Pair {
        TreeNode<Integer> node;
        int index;
        Pair(TreeNode<Integer> node, int index) {
            this.node = node;
            this.index = index;
        }
    }
    public static ArrayList<Integer> verticalOrderTraversal(TreeNode<Integer> root) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        Queue<Pair> que = new ArrayDeque<>();
        que.offer(new Pair(root, 0));

        while (!que.isEmpty()) {
            TreeNode<Integer> cur = que.peek().node;
            int ind = que.poll().index;
            if (!map.containsKey(ind)) 
                map.put(ind, new ArrayList<Integer>());
                
            
            map.get(ind).add(cur.data);

            if (cur.left != null)       que.offer(new Pair(cur.left, ind - 1));
            if (cur.right != null)      que.offer(new Pair(cur.right, ind + 1));
        }
        int[] arr = new int[map.size()];
        int ind = 0;
        for (int key: map.keySet()) 
            arr[ind++] = key;
        Arrays.sort(arr);
        ArrayList<Integer> res = new ArrayList<>();
        for (int i: arr) {
            for (int value: map.get(i))
                res.add(value);
        }
        return res;
    }
}
