import java.util.*;

public class Solution {
    public static void nextSmallest(ArrayList<Integer> heights, int[] ns, int n) {
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights.get(stack.peek()) >= heights.get(i))
                stack.pop();
            if (stack.isEmpty())
                ns[i] = n - 1;
            else
                ns[i] = stack.peek() - 1;
            stack.push(i);
        }
    }
    public static void prevSmallest(ArrayList<Integer> heights, int[] ps, int n) {
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && heights.get(stack.peek()) >= heights.get(i))
                stack.pop();
            if (stack.isEmpty())
                ps[i] = 0;
            else
                ps[i] = stack.peek() + 1;
            stack.push(i);
        }
    }
    public static int largestRectangle(ArrayList < Integer > heights) {
        int n = heights.size();
        int[] ns = new int[n];
        int[] ps = new int[n];
        nextSmallest(heights, ns, n);
        prevSmallest(heights, ps, n);
        int max = 0;
        for (int i = 0; i < n; i++) {
            int area = heights.get(i) * (ns[i] - ps[i] + 1);
            max = Math.max(max, area);
        }
        return max;
    }
}
