import java.util.*;

class Tuple {
	int row; 
	int col;
	int time;
	Tuple(int row, int col, int time) {
		this.row = row;
		this.col = col;
		this.time = time;
	}
}
public class Solution {
	public static int minTimeToRot(int[][] grid, int n, int m) {
		
		Queue<Tuple> que = new ArrayDeque<>();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] == 2) 
					que.offer(new Tuple(i, j, 0));
			}
		}
		int minTime = 0;
		int[] dr = {-1, 0, 0, 1};
		int[] dc = {0, -1, 1, 0};
		while (!que.isEmpty()) {
			int size = que.size();
			while (size-->0) {
				int r = que.peek().row, c = que.peek().col, t = que.peek().time;
				que.poll();
				minTime = t;
				t++;
				for (int i = 0; i < 4; i++) {
					int nr = r + dr[i];
					int nc = c + dc[i];
					if (nr >= 0 && nr < n && nc >= 0 && nc < m && grid[nr][nc] == 1 && grid[nr][nc] != -1) {
						grid[nr][nc] = -1;
						que.offer(new Tuple(nr, nc, t));
					}
				}
			}
		}

		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				if (grid[i][j] == 1)
					return -1;
		return minTime;

	}

}
