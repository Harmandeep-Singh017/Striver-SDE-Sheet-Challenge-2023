import java.util.*;

public class LRUCache {
    Map<Integer, Node> map;
    Node head;
    Node tail;
    int cap;
    LRUCache(int capacity) {
        map = new HashMap<>();
        head = new Node(-1, -1);
        tail = new Node(-1, -1);
        head.next = tail;
        tail.prev = head;
        cap = capacity;
    }

    public int get(int key) {
        if (!map.containsKey(key))
            return -1;
        Node node = map.get(key);
        remove(node);
        add(node);
        return node.val;
    }

    public void put(int key, int value) {
        if (map.containsKey(key))
            remove(map.get(key));
        if (cap == map.size())
            remove(tail.prev);
        add(new Node(key, value));
    }

    public void remove(Node node) {
        map.remove(node.key);
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    public void add(Node node) {
        map.put(node.key, node);
        node.next = head.next;
        head.next = node;
        node.next.prev = node;
        node.prev = head;
    }

    class Node {
        int key, val;
        Node next, prev;
        Node(int k, int v) {
            key = k;
            val = v;
        }
    }
}
