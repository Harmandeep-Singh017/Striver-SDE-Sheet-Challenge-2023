/*
    1. Find the middle of the linked list.
    2. Reverse the second half of the List
    3. Compare first and second half of the List.
*/


public class Solution {

    public static boolean isPalindrome(LinkedListNode<Integer> head) {
        LinkedListNode<Integer> slow = head;
        LinkedListNode<Integer> fast = head;
 
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
 
        LinkedListNode<Integer> prev = null;
        LinkedListNode<Integer> curr = slow;
        while (curr != null) {
            LinkedListNode<Integer> next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
 
        LinkedListNode<Integer> p1 = head;
        LinkedListNode<Integer> p2 = prev;
        while (p2 != null) {
            if (!p1.data.equals(p2.data)) {
                return false;
            }
            p1 = p1.next;
            p2 = p2.next;
        }
 
        return true;
    }
}
